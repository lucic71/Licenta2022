# Stateful testing (and control plane testing?)
https://www.usenix.org/conference/nsdi16/technical-sessions/presentation/fayaz (https://www.usenix.org/conference/nsdi20/presentation/yuan very similar papers)
https://dl.acm.org/doi/pdf/10.1145/2620728.2620751
https://www.usenix.org/conference/nsdi19/presentation/moon (this sounds cool)
https://ieeexplore.ieee.org/abstract/document/4510736
https://www.hindawi.com/journals/misy/2021/1257046/ (explains nicely how p4 works

# Network testing
https://www.quora.com/What-are-the-Network-L2-L3-testing-tools
https://qr.ae/pG6bM8 
https://www.scribbr.com/dissertation/abstract/ - How to write an abstract
https://dl.acm.org/doi/pdf/10.1145/3230718.3232104 - Towards a Highly Scalable Network Tester
https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8533489 - FlueNT10G: A Programmable FPGA-based
Network Tester for Multi-10-Gigabit Ethernet
https://link.springer.com/content/pdf/10.1007%2F978-3-642-28534-9_17.pdf - Flexible High Performance Traffic Generation
on Commodity Multiâ€“core Platforms
https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8961913&casa_token=hKhO7a-rnBEAAAAA:XCI9wAYigwOh0c7FjqFp1eNkA7msRa4QaBEhJCZOGSEwLQSo6ElYBQmeCqhMRQdRFVonlJfP8wDK&tag=1 - Toward Comprehensive Network Verification: Practices, Challenges and Beyond

# Portability
https://d1wqtxts1xzle7.cloudfront.net/30773221/20491A-with-cover-page-v2.pdf?Expires=1641925043&Signature=Un1oOXy6XT4iHGo-plq-AeBIx5rM0OK9aeLGSfhqMHTlxgHHFzW87CZUCkgu7cAT9rHSPJ2p7~0PfdotDP3oMopjIPJgSYzctCL7YI5vdN2J9qUXDI8O4H4XuX895wkGacRBfKXXKMQGX~Vp9B68uMVfsJOYJTNs1C67yzGa9grCvpcl-s7NHvozdVR7a7ozdYQ3t1PDeqag8B-t3sheCFxRU7B8hp57gzoQ7oHsnu2PD2uXiMCok0FQyKM5~z63L0gk3IUZ83DmtD6EFwH7IjHbUrrQKJGJ8ECIJEaXhU8pisl4FMNnPyxFG8yc5zMV-VAt~ZnXpKJDjeqbnVT68A__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA - Tanenbaum, Portability
https://www.researchgate.net/publication/340271565_A_Systematic_Literature_Review_for_Software_Portability_Measurement_Preliminary_Results - A Systematic Literature Review for Software Portability Measurement: Preliminary Results (great summary for software portability from the past decades)
https://www.proquest.com/openview/01663420235e02163609ca21fae1930c/1?pq-origsite=gscholar&cbl=41798 - nice insight for software portability
https://arxiv.org/pdf/2201.07845.pdf - How ISO C became unusable for operating systems development
https://begriffs.com/posts/2018-11-15-c-portability.html - C Portability Lessons from Weird Machines
(maybe the above article teaches us the importance of following a standard in order to achieve a high degree of portability)
http://evan.nemerson.com/2021/05/04/portability-is-reliability/ - technical advices for achieving portability
http://statspotting.com/the-death-of-portability/
https://cr.yp.to/docs/unixport.html - UNIX portability notes (does our porting work on all unixes?)
https://drewdevault.com/2017/11/13/Portability-matters.html

# Software engineerig
https://github.com/papers-we-love/papers-we-love/blob/master/design/out-of-the-tar-pit.pdf (nice paper talking about software complexity, does it help us get out of the tar pit ;) )

# Porting
https://news.ycombinator.com/item?id=6110398 - Porting dl.google.com from C++ to Go
https://github.com/shlomif/what-i-learned-from-porting-to-freebsd - this guy has similar problems with us (what can we learn from this?)
